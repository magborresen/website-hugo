<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Magnus Borresen</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Magnus Borresen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© Magnus Borresen</copyright>
    <lastBuildDate>Thu, 20 Apr 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preparing Time Series Data For Neural Network Inputs</title>
      <link>http://localhost:1313/posts/timeseriesgenerator-keras/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/timeseriesgenerator-keras/</guid>
      <description>&lt;p&gt;While working on my master&amp;rsquo;s thesis I needed some processing of temporal data such that it could be used as an input in TensorFlow Keras. Here I stumbled across the &lt;em&gt;TimeseriesGenerator&lt;/em&gt;, which is a function from the Keras library. However, this is no longer recommended to be used by TensorFlow.&lt;/p&gt;&#xA;&lt;p&gt;Instead, I found another function called &lt;em&gt;timeseries_dataset_from_array&lt;/em&gt;. Which takes a Numpy array and converts it into a TensorFlow dataset-type object. I would not always recommend using this, and it might be easier to just create your own function for loading and separating the data. But the &lt;em&gt;timeseries_dataset_from_array&lt;/em&gt; function is super neat if you are working with a lot of data and are trying to save space.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bode Plots in Python</title>
      <link>http://localhost:1313/posts/bode-plots-in-python/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/bode-plots-in-python/</guid>
      <description>&lt;p&gt;This notebook will go through a pratical example of how to do bode plots in Python and how to find several other control related charateristics. We&amp;rsquo;ll look at an actual transfer function and derive all the information from that.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start off by importing the Python libraries that we are going to need. If you are not able to import the library, please install it using &lt;code&gt;pip&lt;/code&gt; in your terminal or command prompt.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
